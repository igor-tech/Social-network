{"version":3,"file":"static/js/887.468da7f3.chunk.js","mappings":"gPACA,EAA0F,sC,mBCM7EA,EAAyB,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,OAAQC,EAA0C,EAA1CA,aAC5C,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0CF,EAAAA,EAAAA,UAASF,GAAnD,eAAOK,EAAP,KAAsBC,EAAtB,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAiBN,KACnB,CAACA,IAaH,OACI,4BACMG,IACE,0BACI,iBAAMK,cAfG,WACrBJ,GAAY,IAcA,SAAwCJ,GAAU,uBAIzDG,IACG,0BACI,kBAAOM,SAbA,SAACC,GACpBJ,EAAiBI,EAAEC,cAAcC,QAYYC,OAlBtB,WACvBT,GAAY,GACZH,EAAaI,IAgB4DS,WAAS,EAACF,MAAOP,U,mECH5FU,EAAa,CACfC,WAAY,UACZC,QAAS,MACTC,aAAc,QAGLC,EAAkB,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,QAAShB,EAA2C,EAA3CA,YACtC,GAA0EiB,EAAAA,EAAAA,MAAnEC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,SAAUC,EAA/B,EAA+BA,SAAsBC,EAArD,EAAyCC,UAAYD,OAASE,EAA9D,EAA8DA,SACxDC,GAAWC,EAAAA,EAAAA,MACXC,EAA0C,mCAAG,WAAOC,GAAP,yFAC7BH,GAASI,EAAAA,EAAAA,IAAcD,IADM,QACzCE,EADyC,UAGvCC,EAAQD,EAAIE,MAAM,IAAK,GAAGC,cAC9BT,EAAS,YAAcO,EAAkC,CAACG,QAAS,sBACnEC,QAAQC,IAAIN,IAEXA,GACD7B,GAAY,GAR+B,2CAAH,sDAmBhD,OAPAG,EAAAA,EAAAA,YAAU,WACNiB,EAAS,WAAYJ,EAAQoB,UAC7BhB,EAAS,iBAAkBJ,EAAQqB,gBACnCjB,EAAS,4BAA6BJ,EAAQsB,2BAC9ClB,EAAS,UAAWJ,EAAQuB,SAC5BnB,EAAS,WAAYJ,EAAQwB,YAC9B,KACI,kBAAMd,SAAUR,EAAaQ,GAA7B,WAGH,iBAAKe,MAAO,CAACC,QAAS,OAAQC,IAAK,QAAnC,WACI,iBAAKF,MAAO9B,EAAZ,WACI,4BACI,oEACA,uCAAcQ,EAAS,YAAvB,IAAmCyB,YAAa,kBAEpD,4BACI,sFACA,oCAAWzB,EAAS,aAApB,IAAiCyB,YAAa,qBAGtD,iBAAKH,MAAO9B,EAAZ,WACI,mEACA,iBAAK8B,MAAO,CAACC,QAAS,OAAQC,IAAK,MAAOE,WAAY,UAAtD,WACI,uFACA,oCAAW1B,EAAS,mBAApB,IAAuC2B,KAAM,kBAEjD,iBAAKL,MAAO,CAACC,QAAS,OAAQC,IAAK,OAAQE,WAAY,UAAvD,WACI,uFACA,uCAAc1B,EAAS,8BAAvB,IAAqDyB,YAAa,sBAG1E,iBAAKH,MAAO9B,EAAZ,WACI,8EACCoC,OAAOC,KAAK3B,GAAQ4B,OAAS,IAAK,gBAAKR,MAAO,CAACS,MAAO,MAAOC,SAAU,IAArC,+BAClCJ,OAAOC,KAAKhC,EAAQwB,UAAgBY,KAAI,SAAAC,GAErC,OADAnB,QAAQC,IAAIY,OAAOC,KAAP,OAAYhC,QAAZ,IAAYA,OAAZ,EAAYA,EAASwB,UAAgBS,SAC1C,4BACH,uBAAII,IADD,KACU,oCAAWlC,EAAS,YAAckC,IAAlC,IACOT,YAAaS,OAFpBA,aAU7B,mBAAQP,KAAM,SAAd,sBC/FKQ,EAAU,SAAC,GAAoD,IAAnDC,EAAkD,EAAlDA,aAAcC,EAAoC,EAApCA,aACnC,OAAO,8BAAGA,IAAgB,4BAAK,uBAAID,IAAT,KAA6BC,QCErD7C,EAAa,CACfC,WAAY,UACZC,QAAS,MACTC,aAAc,QAEL2C,EAAc,SAAC,GAA4D,IAA3DzC,EAA0D,EAA1DA,QAAS0C,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,aAC3C,GAAgC7D,EAAAA,EAAAA,WAAS,GAAzC,eAAO8D,EAAP,KAAiBC,EAAjB,KACA,OAAO,gCACFH,IAAW,0BACR,mBAAQI,QAASH,EAAjB,oBAEH3C,EAAQuB,UAAW,sEAAgBvB,EAAQuB,WAC1CqB,GAEI,iBAAKnB,MAAO,CAACC,QAAS,OAAQC,IAAK,QAAnC,WACE,iBAAKF,MAAO9B,EAAZ,WACI,kEACCK,EAAQqB,gBACH,iJAA+BrB,EAAQsB,8BACvC,qIAGV,iBAAKG,MAAO9B,EAAZ,WACI,+EACEK,EAAQwB,WAAY,gIACrBO,OAAOC,KAAKhC,EAAQwB,UAAgBY,KAAI,SAAAC,GAAQ,IAAD,EAC5C,OAAO,SAACC,EAAD,CAASC,aAAcF,EACdG,aAAY,UAAExC,EAAQwB,gBAAV,aAAE,EAAmBa,IAC5BA,aAf/B,gBAAKS,QAAS,kBAAMD,GAAY,IAAOpB,MAAO,CAACsB,OAAQ,WAAvD,2ECHRC,EAAc,CAChBC,QAAS,EACTC,OAAQ,EACRC,MAAO,EACPC,WAAY,EACZC,SAAU,SACVxD,QAAS,EACTyD,OAAQ,GA6CZ,MA1CA,YAAyG,IAAD,EAAlFtD,EAAkF,EAAlFA,QAASpB,EAAyE,EAAzEA,OAAQC,EAAiE,EAAjEA,aAAc6D,EAAmD,EAAnDA,QAASa,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,YACrE,GAAgC1E,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMyE,GAAWC,EAAAA,EAAAA,QAAyB,MAE1C,OAAK1D,GAeD,0BACI,iBAAK2D,UAAWC,EAAhB,WACI,iBAAKnC,MAAO,CAACC,QAAS,OAAQmC,cAAe,SAAUV,MAAO,QAASxB,IAAK,GAA5E,WACI,gBAAKmC,KAAK,UAAA9D,EAAQ+D,cAAR,eAAgBC,QAASC,EAAQC,IAAI,GAAGzC,MAAO,CAACyB,OAAQ,OACjER,IAAW,mBAAQI,QAfV,WAAO,IAAD,EAC5BW,IAAQ,UAAIA,EAASU,eAAb,OAAI,EAAkBC,UAcN,2HACX1B,IAAW,kBAAOZ,KAAM,OAAQuC,OAAQ,aAAcC,IAAKb,EAAUhC,MAAOuB,EAC1D3D,SAdb,SAACC,GACnB,GAAIA,EAAEiF,OAAOC,OAASlF,EAAEiF,OAAOC,MAAMvC,OAAQ,CACzC,IAAMwC,EAAOnF,EAAEiF,OAAOC,MAAM,GAC5BjB,EAAUkB,WAaN,iBAAKhD,MAAO,CAACC,QAAS,OAAQC,IAAK,GAAIE,WAAY,OAAnD,WACI,gBAAKJ,MAAO,CAACU,SAAU,IAAvB,SAA6BnC,EAAQoB,YACrC,SAACzC,EAAD,CAAwBC,OAAQA,EAAQC,aAAcA,QAE1D,kBAECE,GAAY2D,GACP,SAAC3C,EAAD,CAAiBC,QAASA,EAASwD,YAAaA,EAAaxE,YAAaA,KAC1E,SAACyD,EAAD,CAAazC,QAASA,EAAS0C,QAASA,EAASC,aAAc,kBAAM3D,GAAY,YA9BxF,SAAC0F,EAAA,EAAD,K,oBCjCf,GAAgB,WAAa,6BCA7B,EAAuB,mBCuBvB,MAfA,SAAcC,GACV,OACI,iBAAKhB,UAAWC,EAAhB,WACI,gBACIE,IAAI,sGACJI,IAAI,KACPS,EAAMC,aACP,0BACI,4BAAOD,EAAME,WAAb,iB,UCNHC,EAAc,SAACH,GACxB,OAAgE1E,EAAAA,EAAAA,IAA4B,CAAC8E,KAAM,aAA5F5E,EAAP,EAAOA,SAAU6E,EAAjB,EAAiBA,MAAO9E,EAAxB,EAAwBA,aAA2BG,EAAnD,EAAsCC,UAAaD,OAOnD,OACI,kBAAMK,SAAUR,GANH,SAACS,GACdgE,EAAMM,YAAYtE,EAAKuE,gBACvBF,OAKMvD,MAAO,CAACC,QAAS,OAAQmC,cAAe,SAAUlC,IAAK,OAAQwB,MAAO,SAD5E,WAEI,SAAC,IAAD,CAAgBhD,SAAUA,EAAUE,OAAQA,EAAO6E,eAAgBC,MAAO,iBAAkBvD,YAAa,wBACzG,mBAAQE,KAAM,SAAd,0BCOZ,EAfgBsD,EAAAA,MAAW,SAACT,GACxBzD,QAAQC,IAAI,aACZ,IAAIkE,GAAe,OAAIV,EAAMW,OAAOlD,KAAI,SAAAmD,GAAC,OAAI,SAAC,EAAD,CAAiBX,YAAaW,EAAEX,YAC1BC,WAAYU,EAAEV,YADTU,EAAEC,OAE1D,OACI,iBAAK7B,UAAWC,EAAAA,WAAhB,WACI,sCACA,SAACkB,EAAD,CAAaG,YAAa,SAACQ,GAAD,OAAiBd,EAAMe,QAAQD,OACzD,gBAAK9B,UAAWC,EAAAA,MAAhB,SACKyB,UCWjB,GAFyBM,EAAAA,EAAAA,KAbD,SAACC,GACrB,MAAO,CACHN,MAAOM,EAAMC,YAAYP,UAGN,SAAC9E,GACxB,MAAO,CACHkF,QAAU,SAACI,GACPtF,GAASuF,EAAAA,EAAAA,IAAUD,QAKNH,CAA6CK,G,gECRtE,MAVA,YAAsG,IAApFhG,EAAmF,EAAnFA,QAASpB,EAA0E,EAA1EA,OAAQC,EAAkE,EAAlEA,aAAa0E,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,YAAgBmB,GAA0B,YACjG,OACI,4BACI,SAAC,EAAD,CAAa3E,QAASA,EAASpB,OAAQA,EAAQC,aAAcA,EAAc6D,QAASiC,EAAMjC,QAASa,UAAWA,EAAWC,YAAaA,KACtI,SAAC,EAAD,Q,oBCwBNyC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAkCD,OAlCCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIC,EAASC,KAAKxB,MAAMyB,MAAMC,OAAOH,OAChCA,GAEc,UADfA,EAAM,UAAMC,KAAKxB,MAAM2B,cACGJ,GACtBC,KAAKxB,MAAM4B,QAAQC,KAAK,UAGhCL,KAAKxB,MAAM8B,WAAWP,GACtBC,KAAKxB,MAAM+B,UAAUR,KACxB,+BAED,WACIC,KAAKQ,mBACR,gCAED,SAAmBC,EAA2CC,EAAyBC,GAC/EX,KAAKxB,MAAMyB,MAAMC,OAAOH,SAAWU,EAAUR,MAAMC,OAAOH,QAC1DC,KAAKQ,mBAEZ,oBAED,WAEI,OACI,SAAC,GAAD,kBAAaR,KAAKxB,OAAlB,IAAyB3E,QAASmG,KAAKxB,MAAM3E,QAASpB,OAAQuH,KAAKxB,MAAM/F,OAChE8D,SAAUyD,KAAKxB,MAAMyB,MAAMC,OAAOH,OAClCrH,aAAcsH,KAAKxB,MAAM9F,aACzB0E,UAAW4C,KAAKxB,MAAMpB,UACtBC,YAAa2C,KAAKxB,MAAMnB,mBAGxC,EAlCCyC,CAAyBb,EAAAA,WA8C/B,GAAe2B,EAAAA,EAAAA,KACXpB,EAAAA,EAAAA,KAVkB,SAACC,GACnB,MAAO,CACH5F,QAAS4F,EAAMC,YAAY7F,QAC3BpB,OAAQgH,EAAMC,YAAYjH,OAC1B0H,WAAYV,EAAMoB,KAAKxB,GACvByB,OAAQrB,EAAMoB,KAAKC,UAKE,CACrBC,eAAgBC,EAAAA,GAChBV,WAAYW,EAAAA,GACZV,UAAWW,EAAAA,GACXxI,aAAcyI,EAAAA,GACd/D,UAAWgE,EAAAA,GACX/D,YAAa5C,EAAAA,KAEjB4G,EAAAA,GATJ,CAUEvB,I,sFCrFWwB,EAAiC,SAAC,GAA4C,IAA3C7F,EAA0C,EAA1CA,YAAauD,EAA6B,EAA7BA,MAAOhF,EAAsB,EAAtBA,SAAUE,EAAY,EAAZA,OAC1E,OAAO,iCACF,uCAAcF,EAASgF,EAAO,CAC1BuC,SAAU,uBADd,IAEI9F,YAAaA,KACjBvB,IAAU,gBAAKoB,MAAO,CAACS,MAAO,MAAOC,SAAU,QAArC,SAA+C9B,EAAOY,e","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backgroundImage\":\"ProfileInfo_backgroundImage__LEsiD\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__K0H7i\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({status, updateStatus} :ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [currentStatus, setCurrentStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setCurrentStatus(status)\r\n    },[status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(currentStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || 'Write you status'}</span>\r\n                </div>\r\n            }\r\n\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus value={currentStatus}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {ProfileUserType, saveProfileTC} from '../../../redux/profile-reducer';\r\nimport {SubmitHandler, useForm} from 'react-hook-form';\r\nimport {useAppDispatch} from '../../../redux/redux-store';\r\nimport React, {useEffect} from 'react';\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileUserType\r\n    saveProfile: (data: InputsProfileData) => void\r\n    setEditMode: (value: boolean) => void\r\n\r\n}\r\ntype contacts = {\r\n    github: string,\r\n    vk: string,\r\n    facebook: string,\r\n    instagram: string,\r\n    twitter: string,\r\n    website: string,\r\n    youtube: string,\r\n    mainLink: string\r\n}\r\nexport type InputsProfileData = {\r\n    aboutMe: string,\r\n    contacts?: contacts\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription?: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\nconst stylePaper = {\r\n    background: '#4c4c70',\r\n    padding: '5px',\r\n    borderRadius: '10px'\r\n}\r\n\r\nexport const ProfileDataForm = ({profile, setEditMode}: ProfileDataFormPropsType) => {\r\n    const {handleSubmit, register, setValue, formState: {errors}, setError} = useForm<InputsProfileData>()\r\n    const dispatch = useAppDispatch()\r\n    const onSubmit: SubmitHandler<InputsProfileData> = async (data: InputsProfileData) => {\r\n        const res = await dispatch(saveProfileTC(data)) as string\r\n        if (res) {\r\n            let error = res.slice(30, -1).toLowerCase()\r\n            setError('contacts.' + error as keyof InputsProfileData, {message: 'not corrected url'})\r\n            console.log(res)\r\n        }\r\n        if (!res) {\r\n            setEditMode(false)\r\n        }\r\n\r\n    };\r\n    useEffect(() => {\r\n        setValue('fullName', profile.fullName)\r\n        setValue('lookingForAJob', profile.lookingForAJob)\r\n        setValue('lookingForAJobDescription', profile.lookingForAJobDescription)\r\n        setValue(`aboutMe`, profile.aboutMe)\r\n        setValue(`contacts`, profile.contacts)\r\n    }, [])\r\n    return <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n\r\n        <div style={{display: 'flex', gap: '20px'}}>\r\n            <div style={stylePaper}>\r\n                <div>\r\n                    <div>Обо мне</div>\r\n                    <textarea {...register('aboutMe')} placeholder={'About me'}/>\r\n                </div>\r\n                <div>\r\n                    <div>Полное имя</div>\r\n                    <input {...register('fullName')} placeholder={'fullName'}/>\r\n                </div>\r\n            </div>\r\n            <div style={stylePaper}>\r\n                <div>Работа</div>\r\n                <div style={{display: 'flex', gap: '5px', alignItems: 'center'}}>\r\n                    <span>Ищу работу</span>\r\n                    <input {...register('lookingForAJob')} type={'checkbox'}/>\r\n                </div>\r\n                <div style={{display: 'flex', gap: '20px', alignItems: 'center'}}>\r\n                    <span>Мои скиллы</span>\r\n                    <textarea {...register('lookingForAJobDescription')} placeholder={'my skills'}/>\r\n                </div>\r\n            </div>\r\n            <div style={stylePaper}>\r\n                <div>Контакты</div>\r\n                {Object.keys(errors).length > 0 && <div style={{color: 'red', fontSize: 14}}>not corrected url</div>}\r\n                {Object.keys(profile.contacts as {}).map(key => {\r\n                    console.log(Object.keys(profile?.contacts as {}).length)\r\n                    return <div key={key}>\r\n                        <b>{key}</b> <input {...register('contacts.' + key as keyof typeof profile.contacts)}\r\n                                            placeholder={key}/>\r\n                        {/*<ErrorMessage errors={errors} name={'contacts.' + key as keyof JSX.IntrinsicElements}*/}\r\n                        {/*              render={({message}) => <div style={{color: \"red\", fontSize: 14}}>{message + \" \" + key}</div>}/>*/}\r\n\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n        <button type={'submit'}>Save</button>\r\n    </form>\r\n}","import React from 'react';\r\n\r\ntype ContactPropsType = {\r\n    contactValue?: string\r\n    contactTitle: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <>{contactValue && <div><b>{contactTitle}</b>: {contactValue}</div>}</>\r\n}","import React, {useState} from 'react';\r\nimport {ProfileUserType} from '../../../redux/profile-reducer';\r\nimport {Contact} from './Contact';\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileUserType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst stylePaper = {\r\n    background: '#4c4c70',\r\n    padding: '5px',\r\n    borderRadius: '10px'\r\n}\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\r\n    const [moreMode, setMoreMode] = useState(false)\r\n    return <>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        {profile.aboutMe && <div>Обо мне - {profile.aboutMe}</div>}\r\n        {!moreMode\r\n            ? <div onClick={() => setMoreMode(true)} style={{cursor: 'pointer'}}>Подробнее...</div>\r\n            : <div style={{display: 'flex', gap: '20px'}}>\r\n                <div style={stylePaper}>\r\n                    <div>Работа</div>\r\n                    {profile.lookingForAJob\r\n                        ? <div>Ищу работу, мои скиллы - {profile.lookingForAJobDescription}</div>\r\n                        : <div>Не в поисках работы</div>\r\n                    }\r\n                </div>\r\n                <div style={stylePaper}>\r\n                    <div>Контакты</div>\r\n                    {!profile.contacts && <div>Контактов пока нет</div>}\r\n                    {Object.keys(profile.contacts as {}).map(key => {\r\n                        return <Contact contactTitle={key}\r\n                                        contactValue={profile.contacts?.[key as keyof typeof profile.contacts]}\r\n                                        key={key}/>\r\n                    })}\r\n                </div>\r\n\r\n            </div>\r\n        }\r\n    </>\r\n}","import React, {ChangeEvent, useRef, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport {ProfileUserType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport avatar from '../../../assets/images/avatar.png'\r\nimport {InputsProfileData, ProfileDataForm} from './ProfileDataForm';\r\nimport {ProfileData} from './ProfileData';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: InputsProfileData) => void\r\n\r\n}\r\n\r\nconst styleHidden = {\r\n    opacity: 0,\r\n    height: 0,\r\n    width: 0,\r\n    lineHeight: 0,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    margin: 0\r\n}\r\n\r\nfunction ProfileInfo({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const selectFileHandler = () => {\r\n        inputRef && inputRef.current?.click();\r\n    }\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            const file = e.target.files[0]\r\n            savePhoto(file)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div style={{display: 'flex', flexDirection: 'column', width: '220px', gap: 5}}>\r\n                    <img src={profile.photos?.large || avatar} alt=\"\" style={{height: 200}}/>\r\n                    {isOwner && <button onClick={selectFileHandler}>Обновить фотографию</button>}\r\n                    {isOwner && <input type={'file'} accept={'.png,.jpg,'} ref={inputRef} style={styleHidden}\r\n                                       onChange={onChangeInput}/>}\r\n                </div>\r\n                <div style={{display: 'flex', gap: 20, alignItems: 'end'}}>\r\n                    <div style={{fontSize: 20}}>{profile.fullName}</div>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                <hr/>\r\n\r\n                {editMode && isOwner\r\n                    ? <ProfileDataForm profile={profile} saveProfile={saveProfile} setEditMode={setEditMode}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__8FbUf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ZRSr4\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    description: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9vyJKx4pLsdMnrXtpsZzKgHIfTV-izdSGHA&usqp=CAU\"\r\n                alt=\"\"/>\r\n            {props.description}\r\n            <div>\r\n                <span>{props.likesCount} like</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\nimport {TextAreaCustom} from '../../common/FormsControls/FormsControls';\r\n\r\ntype AddPostFormType = {\r\n    newPostBody: (newPostBody: string) => void\r\n}\r\ntype AddPostUseFormType = {\r\n    newPostProfile: string\r\n}\r\n\r\nexport const AddPostForm = (props: AddPostFormType) => {\r\n    const {register, reset, handleSubmit, formState: { errors } } = useForm<AddPostUseFormType>({mode: 'onChange'})\r\n\r\n    const onSubmit = (data: AddPostUseFormType) => {\r\n        props.newPostBody(data.newPostProfile)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}\r\n              style={{display: 'flex', flexDirection: 'column', gap: '10px', width: '200px'}}>\r\n            <TextAreaCustom register={register} errors={errors.newPostProfile} label={'newPostProfile'} placeholder={'enter your message'}/>\r\n            <button type={'submit'}>Add post</button>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {AddPostForm} from './AddPostForm';\r\n\r\ntype PostType = {\r\n    id: number\r\n    description: string\r\n    likesCount: number\r\n}\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log('Render yo')\r\n    let postsElement = [...props.posts].map(p => <Post key={p.id} description={p.description}\r\n                                                       likesCount={p.likesCount}/>)\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm newPostBody={(newPostText) => props.addPost(newPostText)}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport myPosts from './MyPosts';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessageBody: string) => void\r\n}\r\ntype PostsType = {\r\n    id: number,\r\n    description: string,\r\n    likesCount: number\r\n}\r\n\r\ntype ProfileReducerInitialStateType = {\r\n    posts: Array<PostsType>,\r\n}\r\nconst mapStateToProps = (state: AppStateType): ProfileReducerInitialStateType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: ((newMessageBody: string) => {\r\n            dispatch(addPostAC(newMessageBody))\r\n        })\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(myPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileUserType} from '../../redux/profile-reducer';\r\nimport {InputsProfileData} from './ProfileInfo/ProfileDataForm';\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: InputsProfileData) => void\r\n}\r\n\r\nfunction Profile({profile, status, updateStatus,savePhoto, saveProfile, ...props}: ProfileTypeProps) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={props.isOwner} savePhoto={savePhoto} saveProfile={saveProfile}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    getProfileTC,\r\n    getStatusTC,\r\n    ProfileUserType, savePhotoTC, saveProfileTC,\r\n    setUserProfileAC,\r\n    updateStatusTC\r\n} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {InputsProfileData} from './ProfileInfo/ProfileDataForm';\r\n\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    authUserId: number | null\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    setUserProfile: (profile: ProfileUserType) => void\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: InputsProfileData) => void\r\n\r\n}\r\n\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchPropsType;\r\n\r\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.authUserId}`\r\n            if (userId === 'null' || !userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setUserProfile: setUserProfileAC,\r\n        getProfile: getProfileTC,\r\n        getStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC,\r\n        saveProfile: saveProfileTC\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)","import React, {FC} from 'react';\r\nimport {FieldError, Path, UseFormRegister} from 'react-hook-form';\r\n\r\ninterface IFormValues {\r\n    [key: string]: string\r\n}\r\n\r\ntype InputProps = {\r\n    label: Path<IFormValues>;\r\n    register: UseFormRegister<IFormValues>;\r\n    errors?: FieldError\r\n    placeholder?: string\r\n}\r\n\r\nexport const TextAreaCustom: FC<InputProps> = ({placeholder, label, register, errors}) => {\r\n    return <>\r\n         <textarea {...register(label, {\r\n             required: 'field is required',\r\n         })} placeholder={placeholder}/>\r\n        {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.message}</div>}\r\n    </>\r\n}\r\n\r\nexport const InputCustom: FC<InputProps> = ({placeholder, label, register, errors}) => {\r\n    return <>\r\n         <input {...register(label, {\r\n             required: 'field is required',\r\n         })} placeholder={placeholder}/>\r\n        {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.message}</div>}\r\n    </>\r\n}\r\n"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","currentStatus","setCurrentStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","autoFocus","stylePaper","background","padding","borderRadius","ProfileDataForm","profile","useForm","handleSubmit","register","setValue","errors","formState","setError","dispatch","useAppDispatch","onSubmit","data","saveProfileTC","res","error","slice","toLowerCase","message","console","log","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","style","display","gap","placeholder","alignItems","type","Object","keys","length","color","fontSize","map","key","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","moreMode","setMoreMode","onClick","cursor","styleHidden","opacity","height","width","lineHeight","overflow","margin","savePhoto","saveProfile","inputRef","useRef","className","s","flexDirection","src","photos","large","avatar","alt","current","click","accept","ref","target","files","file","Preloader","props","description","likesCount","AddPostForm","mode","reset","newPostBody","newPostProfile","label","React","postsElement","posts","p","id","newPostText","addPost","connect","state","profilePage","newMessageBody","addPostAC","myPosts","ProfileContainer","userId","this","match","params","authUserId","history","push","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","setUserProfile","setUserProfileAC","getProfileTC","getStatusTC","updateStatusTC","savePhotoTC","withRouter","TextAreaCustom","required"],"sourceRoot":""}