{"version":3,"file":"static/js/3.fbc9d58d.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__6VEpv\",\"dialogsItems\":\"Dialogs_dialogsItems__IiE2E\",\"active\":\"Dialogs_active__mPJqg\",\"messages\":\"Dialogs_messages__MZRhX\",\"message\":\"Dialogs_message__vZwS5\",\"avatar\":\"Dialogs_avatar__Qpnxb\",\"name\":\"Dialogs_name__qsMLw\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogsItemPropsType = {\r\n    name: string\r\n    id: number\r\n    link: string\r\n}\r\nfunction DialogItem(props: DialogsItemPropsType) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialogs + ' ' + s.active}>\r\n            <img className={s.avatar} src={props.link} alt=\"\"/>\r\n            <NavLink className={s.name} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n\r\n}\r\nfunction Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {MessagesPagetType} from '../../App';\r\nimport {useForm} from 'react-hook-form';\r\n\r\ntype DialogsType = {\r\n    messagesPage: MessagesPagetType\r\n    updateNewMassageBody: (body: any) => void\r\n    sendMessageBody: (newMessageBody: string) => void\r\n}\r\n\r\nfunction Dialogs(props: DialogsType) {\r\n    let state = props.messagesPage\r\n\r\n    let dialogsElements = state.dialogs.map(n => <DialogItem key={n.id} name={n.name} id={n.id} link={n.link}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageForm sendMessageBody={(newMessageBody) => props.sendMessageBody(newMessageBody)}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    sendMessageBody: (newMessageBody: string) => void\r\n}\r\nexport type AddMessageUseFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm = (props: AddMessageFormType) => {\r\n    const {register, reset, handleSubmit, formState: {errors}} = useForm<AddMessageUseFormType>()\r\n\r\n    const onSubmit = (data: any) => {\r\n        props.sendMessageBody(data.newMessageBody)\r\n        reset()\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} style={{display: 'flex', flexDirection: 'column', gap:'10px', width: '200px'}}>\r\n            <textarea {...register('newMessageBody', {\r\n                required: 'field is required',\r\n            })} placeholder={'enter your message'}/>\r\n            {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.newMessageBody?.message}</div>}\r\n            <button type={'submit'}>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport {DialogsContainerType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    messagesPage: DialogsContainerType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessageBody: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessageBody: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n","import React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {Navigate} from 'react-router';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    let RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T & {}}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n"],"names":["props","path","id","_jsxs","className","s","children","_jsx","src","link","alt","NavLink","to","name","message","AddMessageForm","_errors$newMessageBod","_useForm","useForm","register","reset","handleSubmit","errors","formState","onSubmit","data","sendMessageBody","newMessageBody","style","display","flexDirection","gap","width","_objectSpread","required","placeholder","color","fontSize","type","state","messagesPage","dialogsElements","dialogs","map","n","DialogItem","messagesElements","messages","m","Message","compose","connect","dispatch","sendMessageAC","WithAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","restProps","_objectWithoutProperties","_excluded","Navigate"],"sourceRoot":""}