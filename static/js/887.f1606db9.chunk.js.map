{"version":3,"file":"static/js/887.f1606db9.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backgroundImage\":\"ProfileInfo_backgroundImage__LEsiD\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__K0H7i\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({status, updateStatus}: ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [currentStatus, setCurrentStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setCurrentStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(currentStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || 'Write you status'}</span>\r\n                </div>\r\n            }\r\n\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus value={currentStatus}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {ProfileUserType, saveProfileTC} from '../../../redux/profile-reducer';\r\nimport {SubmitHandler, useForm} from 'react-hook-form';\r\nimport React, {useEffect} from 'react';\r\nimport {useAppDispatch} from '../../../hooks/useAppDispatch';\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileUserType\r\n    saveProfile: (data: InputsProfileData) => void\r\n    setEditMode: (value: boolean) => void\r\n\r\n}\r\ntype contacts = {\r\n    github: string,\r\n    vk: string,\r\n    facebook: string,\r\n    instagram: string,\r\n    twitter: string,\r\n    website: string,\r\n    youtube: string,\r\n    mainLink: string\r\n}\r\nexport type InputsProfileData = {\r\n    aboutMe: string,\r\n    contacts?: contacts\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription?: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\nconst stylePaper = {\r\n    background: '#4c4c70',\r\n    padding: '5px',\r\n    borderRadius: '10px'\r\n}\r\n\r\nexport const ProfileDataForm = ({profile, setEditMode}: ProfileDataFormPropsType) => {\r\n    const {handleSubmit, register, setValue, formState: {errors}, setError} = useForm<InputsProfileData>()\r\n    const dispatch = useAppDispatch()\r\n    const onSubmit: SubmitHandler<InputsProfileData> = async (data: InputsProfileData) => {\r\n        const res = await dispatch(saveProfileTC(data))\r\n\r\n        if (res) {\r\n            let error = res.toString().slice(30, -1).toLowerCase()\r\n            setError('contacts.' + error as keyof InputsProfileData, {message: 'not corrected url'})\r\n            console.log(res)\r\n        }\r\n        if (!res) {\r\n            setEditMode(false)\r\n        }\r\n\r\n    };\r\n    useEffect(() => {\r\n        setValue('fullName', profile.fullName)\r\n        setValue('lookingForAJob', profile.lookingForAJob)\r\n        setValue('lookingForAJobDescription', profile.lookingForAJobDescription)\r\n        setValue(`aboutMe`, profile.aboutMe)\r\n        setValue(`contacts`, profile.contacts)\r\n    }, [])\r\n    return <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n\r\n        <div style={{display: 'flex', gap: '20px'}}>\r\n            <div style={stylePaper}>\r\n                <div>\r\n                    <div>Обо мне</div>\r\n                    <textarea {...register('aboutMe')} placeholder={'About me'}/>\r\n                </div>\r\n                <div>\r\n                    <div>Полное имя</div>\r\n                    <input {...register('fullName')} placeholder={'fullName'}/>\r\n                </div>\r\n            </div>\r\n            <div style={stylePaper}>\r\n                <div>Работа</div>\r\n                <div style={{display: 'flex', gap: '5px', alignItems: 'center'}}>\r\n                    <span>Ищу работу</span>\r\n                    <input {...register('lookingForAJob')} type={'checkbox'}/>\r\n                </div>\r\n                <div style={{display: 'flex', gap: '20px', alignItems: 'center'}}>\r\n                    <span>Мои скиллы</span>\r\n                    <textarea {...register('lookingForAJobDescription')} placeholder={'my skills'}/>\r\n                </div>\r\n            </div>\r\n            <div style={stylePaper}>\r\n                <div>Контакты</div>\r\n                {Object.keys(errors).length > 0 && <div style={{color: 'red', fontSize: 14}}>not corrected url</div>}\r\n                {Object.keys(profile.contacts as {}).map(key => {\r\n                    console.log(Object.keys(profile?.contacts as {}).length)\r\n                    return <div key={key}>\r\n                        <b>{key}</b> <input {...register('contacts.' + key as keyof typeof profile.contacts)}\r\n                                            placeholder={key}/>\r\n                        {/*<ErrorMessage errors={errors} name={'contacts.' + key as keyof JSX.IntrinsicElements}*/}\r\n                        {/*              render={({message}) => <div style={{color: \"red\", fontSize: 14}}>{message + \" \" + key}</div>}/>*/}\r\n\r\n                    </div>\r\n                })}\r\n            </div>\r\n        </div>\r\n        <button type={'submit'}>Save</button>\r\n    </form>\r\n}","import React from 'react';\r\n\r\ntype ContactPropsType = {\r\n    contactValue?: string\r\n    contactTitle: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <>{contactValue && <div><b>{contactTitle}</b>: {contactValue}</div>}</>\r\n}","import React, {useState} from 'react';\r\nimport {ProfileUserType} from '../../../redux/profile-reducer';\r\nimport {Contact} from './Contact';\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileUserType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst stylePaper = {\r\n    background: '#4c4c70',\r\n    padding: '5px',\r\n    borderRadius: '10px'\r\n}\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\r\n    const [moreMode, setMoreMode] = useState(false)\r\n\r\n    return <>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        {profile.aboutMe && <div>Обо мне - {profile.aboutMe}</div>}\r\n        {!moreMode\r\n            ? <div onClick={() => setMoreMode(true)} style={{cursor: 'pointer'}}>Подробнее...</div>\r\n            : <div style={{display: 'flex', gap: '20px'}}>\r\n                <div style={stylePaper}>\r\n                    <div>Работа</div>\r\n                    {profile.lookingForAJob\r\n                        ? <div>Ищу работу, мои скиллы - {profile.lookingForAJobDescription}</div>\r\n                        : <div>Не в поисках работы</div>\r\n                    }\r\n                </div>\r\n                <div style={stylePaper}>\r\n                    <div>Контакты</div>\r\n                    {Object.entries(profile.contacts as {}).every(([ key,value]) => value === '') && <div>Контактов пока нет</div>}\r\n                    {Object.keys(profile.contacts as {}).map((key) => {\r\n\r\n                        return <Contact contactTitle={key}\r\n                                        contactValue={profile.contacts?.[key as keyof typeof profile.contacts]}\r\n                                        key={key}/>\r\n                    })}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        }\r\n    </>\r\n}","import React, {ChangeEvent, useRef, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport {ProfileUserType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport avatar from '../../../assets/images/avatar.png'\r\nimport {InputsProfileData, ProfileDataForm} from './ProfileDataForm';\r\nimport {ProfileData} from './ProfileData';\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: InputsProfileData) => void\r\n\r\n}\r\n\r\nconst styleHidden = {\r\n    opacity: 0,\r\n    height: 0,\r\n    width: 0,\r\n    lineHeight: 0,\r\n    overflow: 'hidden',\r\n    padding: 0,\r\n    margin: 0\r\n}\r\n\r\nfunction ProfileInfo({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoType) {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const selectFileHandler = () => {\r\n        inputRef && inputRef.current?.click();\r\n    }\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            const file = e.target.files[0]\r\n            savePhoto(file)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div style={{display: 'flex', flexDirection: 'column', width: '220px', gap: 5}}>\r\n                    <img src={profile.photos?.large || avatar} alt=\"\" style={{height: 200}}/>\r\n                    {isOwner && <button onClick={selectFileHandler}>Обновить фотографию</button>}\r\n                    {isOwner && <input type={'file'} accept={'.png,.jpg,'} ref={inputRef} style={styleHidden}\r\n                                       onChange={onChangeInput}/>}\r\n                </div>\r\n                <div style={{display: 'flex', gap: 20, alignItems: 'end'}}>\r\n                    <div style={{fontSize: 20}}>{profile.fullName}</div>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                <hr/>\r\n\r\n                {editMode && isOwner\r\n                    ? <ProfileDataForm profile={profile} saveProfile={saveProfile} setEditMode={setEditMode}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__8FbUf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ZRSr4\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    description: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9vyJKx4pLsdMnrXtpsZzKgHIfTV-izdSGHA&usqp=CAU\"\r\n                alt=\"\"/>\r\n            {props.description}\r\n            <div>\r\n                <span>{props.likesCount} like</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\n\r\ntype AddPostFormType = {\r\n    newPostBody: (newPostBody: string) => void\r\n}\r\ntype AddPostUseFormType = {\r\n    newPostProfile: string\r\n}\r\n\r\nexport const AddPostForm = (props: AddPostFormType) => {\r\n    const {register, reset, handleSubmit, formState: { errors } } = useForm<AddPostUseFormType>({mode: 'onChange'})\r\n\r\n    const onSubmit = (data: AddPostUseFormType) => {\r\n        props.newPostBody(data.newPostProfile)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}\r\n              style={{display: 'flex', flexDirection: 'column', gap: '10px', width: '200px'}}>\r\n            <textarea {...register('newPostProfile', {\r\n                required: 'field is required',\r\n            })} placeholder={'enter your message'}/>\r\n            {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.newPostProfile?.message}</div>}\r\n            <button type={'submit'}>Add post</button>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {AddPostForm} from './AddPostForm';\r\n\r\ntype PostType = {\r\n    id: number\r\n    description: string\r\n    likesCount: number\r\n}\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log('Render yo')\r\n    let postsElement = [...props.posts].map(p => <Post key={p.id} description={p.description}\r\n                                                       likesCount={p.likesCount}/>)\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm newPostBody={(newPostText) => props.addPost(newPostText)}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport myPosts from './MyPosts';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessageBody: string) => void\r\n}\r\ntype PostsType = {\r\n    id: number,\r\n    description: string,\r\n    likesCount: number\r\n}\r\n\r\ntype ProfileReducerInitialStateType = {\r\n    posts: Array<PostsType>,\r\n}\r\nconst mapStateToProps = (state: AppStateType): ProfileReducerInitialStateType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: ((newMessageBody: string) => {\r\n            dispatch(addPostAC(newMessageBody))\r\n        })\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(myPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileUserType} from '../../redux/profile-reducer';\r\nimport {InputsProfileData} from './ProfileInfo/ProfileDataForm';\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: InputsProfileData) => void\r\n}\r\n\r\nfunction Profile({profile, status, updateStatus,savePhoto, saveProfile, ...props}: ProfileTypeProps) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} isOwner={props.isOwner} savePhoto={savePhoto} saveProfile={saveProfile}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {\r\n    getProfileTC,\r\n    getStatusTC,\r\n    ProfileUserType,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    setUserProfileAC,\r\n    updateStatusTC\r\n} from '../../redux/profile-reducer';\r\nimport {compose} from 'redux';\r\nimport {InputsProfileData} from './ProfileInfo/ProfileDataForm';\r\nimport {useLocation, useNavigate, useParams} from 'react-router';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\n\r\nexport function withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n    router: any\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    authUserId: number | null\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    setUserProfile: (profile: ProfileUserType) => void\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (data: InputsProfileData) => void\r\n\r\n}\r\n\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchPropsType;\r\n\r\ntype ProfileContainerType = PathParamsType & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.authUserId}`\r\n            if (userId === 'null' || !userId) {\r\n                return this.props.router.navigate('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     isOwner={!this.props.router.params.userId}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        setUserProfile: setUserProfileAC,\r\n        getProfile: getProfileTC,\r\n        getStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: savePhotoTC,\r\n        saveProfile: saveProfileTC\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)","import React, {ComponentType} from 'react';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {Navigate} from 'react-router';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    let RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Navigate to={'/login'}/>\r\n        return <Component {...restProps as T & {}}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n"],"names":["ProfileStatusWithHooks","_ref","status","updateStatus","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","currentStatus","setCurrentStatus","useEffect","_jsxs","children","_jsx","onDoubleClick","onChange","e","currentTarget","value","onBlur","autoFocus","stylePaper","background","padding","borderRadius","ProfileDataForm","profile","_useForm","useForm","handleSubmit","register","setValue","errors","formState","setError","dispatch","useAppDispatch","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","res","error","wrap","_context","prev","next","saveProfileTC","sent","toString","slice","toLowerCase","message","console","log","stop","_x","apply","arguments","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contacts","style","display","gap","_objectSpread","placeholder","alignItems","type","Object","keys","length","color","fontSize","map","key","Contact","contactTitle","contactValue","_Fragment","ProfileData","isOwner","goToEditMode","moreMode","setMoreMode","onClick","entries","every","_ref3","_profile$contacts","cursor","styleHidden","opacity","height","width","lineHeight","overflow","margin","_profile$photos","savePhoto","saveProfile","inputRef","useRef","className","s","flexDirection","src","photos","large","avatar","alt","_inputRef$current","current","click","accept","ref","target","files","file","Preloader","props","description","likesCount","AddPostForm","_errors$newPostProfil","mode","reset","newPostBody","newPostProfile","required","React","postsElement","_toConsumableArray","posts","p","Post","id","newPostText","addPost","connect","state","profilePage","newMessageBody","addPostAC","myPosts","_objectWithoutProperties","_excluded","ProfileInfo","MyPostsContainer","withRouter","Component","location","useLocation","navigate","useNavigate","params","useParams","router","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","_createClass","userId","this","concat","authUserId","getProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Profile","compose","auth","isAuth","setUserProfile","setUserProfileAC","getProfileTC","getStatusTC","updateStatusTC","savePhotoTC","WithAuthRedirect","mapStateToPropsForRedirect","restProps","Navigate","to"],"sourceRoot":""}