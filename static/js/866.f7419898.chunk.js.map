{"version":3,"file":"static/js/866.f7419898.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA4I,0BAA5I,EAAgL,yBAAhL,EAAkN,wBAAlN,EAAiP,sB,mBCmBjP,MAXA,SAAoBA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,iBAAKC,UAAWC,EAAY,IAAMA,EAAlC,WACI,gBAAKD,UAAWC,EAAUC,IAAKL,EAAMM,KAAMC,IAAI,MAC/C,SAAC,KAAD,CAASJ,UAAWC,EAAQI,GAAIP,EAAhC,SAAuCD,EAAMS,WCDzD,MANA,SAAiBT,GACb,OACI,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMU,W,oBCiC1C,IAAMC,EAAiB,SAACX,GACpB,OAA6DY,EAAAA,EAAAA,MAAtDC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,aAA0BC,EAAlD,EAAsCC,UAAYD,OAMlD,OACI,kBAAME,SAAUH,GALH,SAACI,GACdnB,EAAMoB,gBAAgBD,EAAKE,gBAC3BP,OAGwCQ,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,IAAI,OAAQC,MAAO,SAA7G,WACI,SAAC,IAAD,CAAgBb,SAAUA,EAAUc,YAAa,qBAAsBC,MAAO,iBAAkBZ,OAAQA,EAAOK,kBAC/G,mBAAQQ,KAAM,SAAd,sBAMZ,EA5CA,SAAiB7B,GACb,IAAI8B,EAAQ9B,EAAM+B,aAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAuB1B,KAAM0B,EAAE1B,KAAMP,GAAIiC,EAAEjC,GAAII,KAAM6B,EAAE7B,MAAtC6B,EAAEjC,OAC5DkC,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAoB5B,QAAS4B,EAAE5B,SAAjB4B,EAAEpC,OAE/D,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK4B,KAEL,iBAAK7B,UAAWC,EAAhB,WACI,yBAAMgC,KACN,0BACI,SAACzB,EAAD,CAAgBS,gBAAiB,SAACC,GAAD,OAAoBrB,EAAMoB,gBAAgBC,e,+DClBzFkB,EAA6B,SAACT,GAChC,MAAO,CACHU,OAAQV,EAAMW,KAAKD,SCK3B,IAcA,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACb,GACnB,MAAO,CACHC,aAAcD,EAAMC,iBAGH,SAACa,GACtB,MAAO,CACHxB,gBAAiB,SAACC,GACduB,GAASC,EAAAA,EAAAA,GAAcxB,UDT5B,SAA6ByB,GAQhC,OAAOH,EAAAA,EAAAA,IAAQJ,EAARI,EAPiB,SAAC3C,GACrB,IAAKwC,EAAwBxC,EAAxBwC,OAAWO,GAAhB,OAA6B/C,EAA7B,GAEA,OAAKwC,GACE,SAACM,GAAD,UAAeC,KADF,SAAC,KAAD,CAAUvC,GAAI,gBCW1C,CAGEwC,I,sFCpBWC,EAAiC,SAAC,GAA4C,IAA3CtB,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,MAAOf,EAAsB,EAAtBA,SAAUG,EAAY,EAAZA,OAC1E,OAAO,iCACF,uCAAcH,EAASe,EAAO,CAC1BsB,SAAU,uBADd,IAEIvB,YAAaA,KACjBX,IAAU,gBAAKM,MAAO,CAAC6B,MAAO,MAAOC,SAAU,QAArC,SAA+CpC,EAAON","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__6VEpv\",\"dialogsItems\":\"Dialogs_dialogsItems__IiE2E\",\"active\":\"Dialogs_active__mPJqg\",\"messages\":\"Dialogs_messages__MZRhX\",\"message\":\"Dialogs_message__vZwS5\",\"avatar\":\"Dialogs_avatar__Qpnxb\",\"name\":\"Dialogs_name__qsMLw\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogsItemPropsType = {\r\n    name: string\r\n    id: number\r\n    link: string\r\n}\r\nfunction DialogItem(props: DialogsItemPropsType) {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialogs + ' ' + s.active}>\r\n            <img className={s.avatar} src={props.link} alt=\"\"/>\r\n            <NavLink className={s.name} to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n\r\n}\r\nfunction Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {MessagesPagetType} from '../../App';\r\nimport {useForm} from 'react-hook-form';\r\nimport {TextAreaCustom} from '../common/FormsControls/FormsControls';\r\n\r\ntype DialogsType = {\r\n    messagesPage: MessagesPagetType\r\n    updateNewMassageBody: (body: any) => void\r\n    sendMessageBody: (newMessageBody: string) => void\r\n}\r\n\r\nfunction Dialogs(props: DialogsType) {\r\n    let state = props.messagesPage\r\n\r\n    let dialogsElements = state.dialogs.map(n => <DialogItem key={n.id} name={n.name} id={n.id} link={n.link}/>)\r\n    let messagesElements = state.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <div>\r\n                    <AddMessageForm sendMessageBody={(newMessageBody) => props.sendMessageBody(newMessageBody)}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    sendMessageBody: (newMessageBody: string) => void\r\n}\r\ntype AddMessageUseFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst AddMessageForm = (props: AddMessageFormType) => {\r\n    const {register, reset, handleSubmit, formState: {errors}} = useForm<AddMessageUseFormType>()\r\n\r\n    const onSubmit = (data: any) => {\r\n        props.sendMessageBody(data.newMessageBody)\r\n        reset()\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} style={{display: 'flex', flexDirection: 'column', gap:'10px', width: '200px'}}>\r\n            <TextAreaCustom register={register} placeholder={'enter your message'} label={'newMessageBody'} errors={errors.newMessageBody}/>\r\n            <button type={'submit'}>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect<T>(Component: ComponentType<T>) {\r\n    let RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n\r\n","import React from 'react';\r\nimport {DialogsContainerType, sendMessageAC} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    messagesPage: DialogsContainerType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessageBody: (newMessageBody: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        messagesPage: state.messagesPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessageBody: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n","import React, {FC} from 'react';\r\nimport {FieldError, Path, UseFormRegister} from 'react-hook-form';\r\n\r\ninterface IFormValues {\r\n    [key: string]: string\r\n}\r\n\r\ntype InputProps = {\r\n    label: Path<IFormValues>;\r\n    register: UseFormRegister<IFormValues>;\r\n    errors?: FieldError\r\n    placeholder?: string\r\n}\r\n\r\nexport const TextAreaCustom: FC<InputProps> = ({placeholder, label, register, errors}) => {\r\n    return <>\r\n         <textarea {...register(label, {\r\n             required: 'field is required',\r\n         })} placeholder={placeholder}/>\r\n        {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.message}</div>}\r\n    </>\r\n}\r\n\r\nexport const InputCustom: FC<InputProps> = ({placeholder, label, register, errors}) => {\r\n    return <>\r\n         <input {...register(label, {\r\n             required: 'field is required',\r\n         })} placeholder={placeholder}/>\r\n        {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.message}</div>}\r\n    </>\r\n}\r\n"],"names":["props","path","id","className","s","src","link","alt","to","name","message","AddMessageForm","useForm","register","reset","handleSubmit","errors","formState","onSubmit","data","sendMessageBody","newMessageBody","style","display","flexDirection","gap","width","placeholder","label","type","state","messagesPage","dialogsElements","dialogs","map","n","messagesElements","messages","m","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageAC","Component","restProps","Dialogs","TextAreaCustom","required","color","fontSize"],"sourceRoot":""}