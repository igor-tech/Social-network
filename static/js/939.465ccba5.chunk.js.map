{"version":3,"file":"static/js/939.465ccba5.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/common/FormsControls/FormsControls.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"backgroundImage\":\"ProfileInfo_backgroundImage__LEsiD\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__K0H7i\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = ({status, updateStatus} :ProfileStatusPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [currentStatus, setCurrentStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setCurrentStatus(status)\r\n    },[status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(currentStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || 'Write you status'}</span>\r\n                </div>\r\n            }\r\n\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus value={currentStatus}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/preloader/Preloader';\r\nimport {ProfileUserType} from '../../../redux/profile-reducer';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nfunction ProfileInfo({profile, status,updateStatus}: ProfileInfoType) {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>{profile.fullName}</div>\r\n                <img src={profile.photos.large} alt=\"\"/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                {profile.aboutMe && <div>Обо мне - {profile.aboutMe}</div>}\r\n                <hr/>\r\n                <div>\r\n                    {profile.lookingForAJob\r\n                        ? <div>Ищу работу, Требования - {profile.lookingForAJobDescription}</div>\r\n                        : <div>Не в поисках работы</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__8FbUf\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__ZRSr4\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    description: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nfunction Post(props: PostPropsType) {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR9vyJKx4pLsdMnrXtpsZzKgHIfTV-izdSGHA&usqp=CAU\"\r\n                alt=\"\"/>\r\n            {props.description}\r\n            <div>\r\n                <span>{props.likesCount} like</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\nimport {TextAreaCustom} from '../../common/FormsControls/FormsControls';\r\n\r\ntype AddPostFormType = {\r\n    newPostBody: (newPostBody: string) => void\r\n}\r\ntype AddPostUseFormType = {\r\n    newPostProfile: string\r\n}\r\n\r\nexport const AddPostForm = (props: AddPostFormType) => {\r\n    const {register, reset, handleSubmit, formState: { errors } } = useForm<AddPostUseFormType>({mode: 'onChange'})\r\n\r\n    const onSubmit = (data: AddPostUseFormType) => {\r\n        props.newPostBody(data.newPostProfile)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}\r\n              style={{display: 'flex', flexDirection: 'column', gap: '10px', width: '200px'}}>\r\n            <TextAreaCustom register={register} errors={errors.newPostProfile} label={'newPostProfile'} placeholder={'enter your message'}/>\r\n            <button type={'submit'}>Add post</button>\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {AddPostForm} from './AddPostForm';\r\n\r\ntype PostType = {\r\n    id: number\r\n    description: string\r\n    likesCount: number\r\n}\r\ntype MyPostsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostBody: string) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log('Render yo')\r\n    let postsElement = [...props.posts].map(p => <Post key={p.id} description={p.description}\r\n                                                       likesCount={p.likesCount}/>)\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm newPostBody={(newPostText) => props.addPost(newPostText)}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostAC} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport myPosts from './MyPosts';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newMessageBody: string) => void\r\n}\r\ntype PostsType = {\r\n    id: number,\r\n    description: string,\r\n    likesCount: number\r\n}\r\n\r\ntype ProfileReducerInitialStateType = {\r\n    posts: Array<PostsType>,\r\n}\r\nconst mapStateToProps = (state: AppStateType): ProfileReducerInitialStateType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: ((newMessageBody: string) => {\r\n            dispatch(addPostAC(newMessageBody))\r\n        })\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(myPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfileUserType} from '../../redux/profile-reducer';\r\n\r\ntype ProfileTypeProps = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nfunction Profile({profile, status, updateStatus}: ProfileTypeProps) {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {getProfileTC, getStatusTC, ProfileUserType, setUserProfileAC, updateStatusTC} from '../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileUserType\r\n    status: string\r\n    authUserId: number | null\r\n    isAuth: boolean\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    setUserProfile: (profile: ProfileUserType) => void\r\n    getProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchPropsType;\r\n\r\ntype ProfileContainerType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = `${this.props.authUserId}`\r\n            if (userId === 'null' || !userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {setUserProfile: setUserProfileAC, getProfile: getProfileTC, getStatus: getStatusTC, updateStatus: updateStatusTC}),\r\n    withRouter,\r\n)(ProfileContainer)","import React, {FC} from 'react';\r\nimport {FieldError, Path, UseFormRegister} from 'react-hook-form';\r\n\r\ninterface IFormValues {\r\n    [key: string]: string\r\n}\r\n\r\ntype InputProps = {\r\n    label: Path<IFormValues>;\r\n    register: UseFormRegister<IFormValues>;\r\n    errors?: FieldError\r\n    placeholder?: string\r\n}\r\n\r\nexport const TextAreaCustom: FC<InputProps> = ({placeholder, label, register, errors}) => {\r\n    return <>\r\n         <textarea {...register(label, {\r\n             required: 'field is required',\r\n         })} placeholder={placeholder}/>\r\n        {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.message}</div>}\r\n    </>\r\n}\r\n\r\nexport const InputCustom: FC<InputProps> = ({placeholder, label, register, errors}) => {\r\n    return <>\r\n         <input {...register(label, {\r\n             required: 'field is required',\r\n         })} placeholder={placeholder}/>\r\n        {errors && <div style={{color: 'red', fontSize: '14px'}}>{errors.message}</div>}\r\n    </>\r\n}\r\n"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","currentStatus","setCurrentStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","autoFocus","profile","className","s","fullName","src","photos","large","alt","aboutMe","lookingForAJob","lookingForAJobDescription","Preloader","props","description","likesCount","AddPostForm","useForm","mode","register","reset","handleSubmit","errors","formState","onSubmit","data","newPostBody","newPostProfile","style","display","flexDirection","gap","width","label","placeholder","type","React","console","log","postsElement","posts","map","p","id","newPostText","addPost","connect","state","profilePage","dispatch","newMessageBody","addPostAC","myPosts","ProfileContainer","userId","this","match","params","authUserId","history","push","getProfile","getStatus","compose","auth","isAuth","setUserProfile","setUserProfileAC","getProfileTC","getStatusTC","updateStatusTC","withRouter","TextAreaCustom","required","color","fontSize","message"],"sourceRoot":""}